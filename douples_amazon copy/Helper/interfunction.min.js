/**
 * @NApiVersion 2.x
 * @NModuleScope public
 *
 * @description  接口脚本
 */

interfunction.min.js

define(["N/record", "N/search", "./core.min", "N/format", './Moment.min'],
    function (record, search, core, format, moment) {



        /**
         * 检查日记账是否存在
         * @param {*} orderid 
         * @param {*} settlmentid +month 
         * @param {*} settlement_ids 
         * @param {*} memomain 
         */
        function CheckJO(orderid, settlmentid, settlement_ids, memomain, acc) {
            log.debug("memomain:" + memomain, "settlement_ids：" + settlement_ids)
            log.debug("search 的 settlmentid:", settlmentid)
            var getc
            search.create({
                type: 'journalentry',
                filters: [{
                        name: 'mainline',
                        operator: 'is',
                        values: true
                    },
                    {
                        name: 'custbody_amazon_settlementid',
                        operator: 'is',
                        values: settlmentid
                    },
                    {
                        name: 'custbody_jour_orderid',
                        operator: 'is',
                        values: orderid
                    },
                    {
                        name: 'memomain',
                        operator: 'is',
                        values: memomain
                    }
                ]
            }).run().each(function (e) {
                getc = true
                log.debug("00000该 settlement id 已结算 " + settlmentid, e.id + "," + orderid)
                return false
            })
            if (getc) {
                log.debug("已存在凭证", orderid + "," + settlmentid)
                settlement_ids.map(function (seid) {
                    record.submitFields({
                        type: "customrecord_aio_amazon_settlement",
                        id: seid,
                        values: {
                            custrecord_settle_is_generate_voucher: true
                        }
                    })
                })
                return false
                //结算修复设置T
            } else {
                var ssd = []
                try {
                    var memomain3
                    if (memomain.indexOf("re") == -1) memomain3 = "03"
                    else memomain3 = "re03"
                    search.create({
                        type: 'journalentry',
                        filters: [{
                                name: 'mainline',
                                operator: 'is',
                                values: true
                            },
                            // { name: 'custbody_amazon_settlementid', operator: 'is', values: settlmentid.split("-")[0] },
                            {
                                name: 'custbody_jour_orderid',
                                operator: 'is',
                                values: orderid
                            },
                            {
                                name: 'custbody_pr_store',
                                operator: 'anyof',
                                values: acc
                            },
                            {
                                name: 'memomain',
                                operator: 'is',
                                values: memomain
                            }
                        ],
                        columns: [{
                            name: "internalid",
                            summary: "GROUP"
                        }]
                    }).run().each(function (e) {
                        ssd.push(e.getValue(e.columns[0]))
                        return true
                    })
                    if (ssd.length > 0) {
                        search.create({
                            type: 'journalentry',
                            filters: [{
                                    name: 'mainline',
                                    operator: 'is',
                                    values: true
                                },
                                // { name: 'custbody_amazon_settlementid', operator: 'is', values: settlmentid.split("-")[0] },
                                {
                                    name: 'custbody_jour_orderid',
                                    operator: 'is',
                                    values: orderid
                                },
                                {
                                    name: 'custbody_pr_store',
                                    operator: 'anyof',
                                    values: acc
                                },
                                {
                                    name: 'memomain',
                                    operator: 'is',
                                    values: memomain3
                                }
                            ],
                            columns: [{
                                name: "internalid",
                                summary: "GROUP"
                            }]
                        }).run().each(function (e) {
                            ssd.push(e.getValue(e.columns[0]))
                            return true
                        })
                        log.debug("寻找之前settlmentid 生成的日记账:", ssd)
                        ssd.map(function (ds) {
                            record.delete({
                                type: "journalentry",
                                id: ds
                            })
                        })
                    }
                } catch (error) {}
                return true
            }
        }
        /**
         * 关联日记账用
         * @param {*} jo1_ids 
         * @param {*} jo2_id 
         * @param {*} jo3_id 
         * @param {*} settlement_ids 
         */
        function relativaJE(jo1_ids, jo2_id, jo3_id, settlement_ids) {
            log.debug("接口脚本jo1_ids : ", jo1_ids)
            // log.debug("接口脚本settlement_ids : ", settlement_ids)
            if (jo1_ids.length < 10)
                jo1_ids.map(function (j1) {
                    record.submitFields({
                        type: "journalentry",
                        id: j1,
                        values: {
                            custbody_estimate_s: j1,
                            custbody_blot_s: jo2_id,
                            custbody_coll_s: jo3_id,
                        }
                    })
                })
            if (jo2_id)
                record.submitFields({
                    type: "journalentry",
                    id: jo2_id,
                    values: {
                        custbody_estimate_s: jo1_ids,
                        custbody_blot_s: jo2_id,
                        custbody_coll_s: jo3_id,
                        // custbody_set_payment_report_recids: JSON.stringify(settlement_ids), // HACK
                    }
                })
            if (jo3_id)
                record.submitFields({
                    type: "journalentry",
                    id: jo3_id,
                    values: {
                        custbody_estimate_s: jo1_ids,
                        custbody_blot_s: jo2_id,
                        custbody_coll_s: jo3_id,
                        // custbody_set_payment_report_recids: JSON.stringify(settlement_ids), // HACK
                    }
                })
            return true
        }

        function setTruesettlment(settlement_ids) {
            log.debug("接口脚本 settlement_ids :", settlement_ids)
            for (var index = 0; index < settlement_ids.length; index++) {
                record.submitFields({
                    type: "customrecord_aio_amazon_settlement",
                    id: settlement_ids[index],
                    values: {
                        custrecord_settle_checked_is: true,
                        custrecord_settle_is_generate_voucher: true,
                        custrecord_february_undeal: ""
                    }
                })
            }
        }


        /**
         *       //请求财务报告，类型type_fin  orders / refunds
         * @param {*} pr_store 店铺ID
         * @param {*} orderid 订单号
         */
        function getFinanceReport(pr_store, orderid, type_fin) {
            var auth = core.amazon.getAuthByAccountId(pr_store),
                enventlists
            var content = core.amazon.listFinancialEvents(auth, orderid, "", "", "", type_fin)
            log.debug("content:", JSON.stringify(content))
            enventlists = content.refund_event_list
            enventlists.map(function (l) {
                if (Object.prototype.toString.call(l) == "[object Array]") { //如果数组
                    log.debug("[object Array]", Object.prototype.toString.call(l))
                    l.map(function (sl) {
                        log.debug("[object Array].map", Object.prototype.toString.call(sl))
                        createRec(sl, pr_store, type_fin) //存储财务报告cache
                    })
                } else {
                    log.debug("bushi arry")
                    createRec(l, pr_store, type_fin) //存储财务报告cache
                }

            })
        }

        function createRec(l, acc, type_fin) {
            var ship_rec;
            search.create({ //去重
                type: "customrecord_amazon_finances_cahce",
                filters: [{
                        name: 'custrecord_amazon_finances_account',
                        operator: 'is',
                        values: acc
                    },
                    {
                        name: 'custrecord_finance_type',
                        operator: 'is',
                        values: type_fin
                    }, //类型
                    {
                        name: 'custrecord_amazon_finances_orderid',
                        operator: 'is',
                        values: l.amazon_order_id
                    },
                    {
                        name: 'custrecord_amazon_ginances_postdate_txt',
                        operator: 'is',
                        values: l.posted_date
                    },
                ]
            }).run().each(function (e) {
                log.error("you", e.id)
                ship_rec = record.load({
                    type: 'customrecord_amazon_finances_cahce',
                    id: e.id
                })
            })
            if (!ship_rec)
                ship_rec = record.create({
                    type: 'customrecord_amazon_finances_cahce'
                })

            var AMERICA_date = format.format({
                value: moment.utc(l.posted_date).toDate(),
                type: format.Type.DATE,
                timezone: format.Timezone.AMERICA_LOS_ANGELES
            })
            log.debug("l.posted_date " + l.posted_date, AMERICA_date)
            ship_rec.setText({
                fieldId: 'custrecord_amazon_finances_postedafter',
                text: AMERICA_date
            }) //财务报告的发布时间
            ship_rec.setValue({
                fieldId: 'custrecord_amazon_ginances_postdate_txt',
                value: l.posted_date
            }) //亚马逊返回的时间文本，不做修改
            ship_rec.setValue({
                fieldId: 'custrecord_amazon_finances_account',
                value: acc
            })
            ship_rec.setValue({
                fieldId: 'custrecord_amazon_finances_orderid',
                value: l.amazon_order_id
            })
            ship_rec.setValue({
                fieldId: 'custrecord_amazon_finances_body',
                value: JSON.stringify(l)
            })

            ship_rec.setValue({
                fieldId: 'custrecord_finance_type',
                value: type_fin
            })
            var cache_id = ship_rec.save()
            log.audit("lie.map OK:", cache_id)

        }
        /**
         *  //查找对应类型科目
         * @param {*} Amount_type 
         * @param {*} Amount_desc 
         * @param {*} Tranction_type 
         */
        function GetSettlmentFee(Amount_type, Amount_desc, Tranction_type) {
            var fils = []
            Amount_type ? fils.push({
                name: 'custrecord_amazon_amount_type',
                operator: 'is',
                values: Amount_type
            }) : fils.push({
                name: 'custrecord_amazon_amount_type',
                operator: 'isempty'
            })
            Amount_desc ? fils.push({
                name: 'custrecord_amazon_amount_description',
                operator: 'is',
                values: Amount_desc
            }) : fils.push({
                name: 'custrecord_amazon_amount_description',
                operator: 'isempty'
            })
            Tranction_type ? fils.push({
                name: 'custrecord_amazon_transaction_type',
                operator: 'is',
                values: Tranction_type
            }) : fils.push({
                name: 'custrecord_amazon_transaction_type',
                operator: 'isempty'
            })
            var incomeaccount
            search.create({
                type: 'customrecord_cost_type_vs_cost_item',
                filters: fils,
                columns: [{
                        name: 'custrecord_item_incomeaccount'
                    },
                    {
                        name: 'custrecord_allowance_item'
                    },
                ]
            }).run().each(function (rec) {
                incomeaccount = rec.getValue("custrecord_item_incomeaccount")
                if (!incomeaccount) //科目字段为空就搜索费用货品下面的科目
                    search.create({
                        type: 'item',
                        filters: [{
                            name: 'internalid',
                            operator: 'is',
                            values: rec.getValue("custrecord_allowance_item")
                        }, ],
                        columns: [{
                            name: 'incomeaccount'
                        }]
                    }).run().each(function (e) {
                        incomeaccount = e.getValue(e.columns[0])
                    })
            })

            if (incomeaccount) {
                return incomeaccount
            } else {
                //找不到对应的费用类型 记录下来 customrecord_amazon_payment_unfee_type
                var fils_unfee = [],
                    unfee_rec
                Tranction_type ? fils_unfee.push({
                    name: 'custrecord_payment_transation_type',
                    operator: 'is',
                    values: Tranction_type
                }) : fils.push({
                    name: 'custrecord_amazon_amount_type',
                    operator: 'isempty'
                })
                Amount_type ? fils_unfee.push({
                    name: 'custrecord_payment_amount_type',
                    operator: 'is',
                    values: Amount_type
                }) : fils.push({
                    name: 'custrecord_amazon_amount_description',
                    operator: 'isempty'
                })
                Amount_desc ? fils_unfee.push({
                    name: 'custrecord_payment_amount_description',
                    operator: 'is',
                    values: Amount_desc
                }) : fils.push({
                    name: 'custrecord_amazon_transaction_type',
                    operator: 'isempty'
                })
                search.create({
                    type: "customrecord_amazon_payment_unfee_type",
                    filters: fils_unfee
                }).run().each(function (e) {
                    unfee_rec = e.id
                })
                if (!unfee_rec) {
                    unfee_rec = record.create({
                        type: "customrecord_amazon_payment_unfee_type"
                    })
                    unfee_rec.setValue({
                        fieldId: "custrecord_payment_transation_type",
                        value: Tranction_type
                    })
                    unfee_rec.setValue({
                        fieldId: "custrecord_payment_amount_type",
                        value: Amount_type
                    })
                    unfee_rec.setValue({
                        fieldId: "custrecord_payment_amount_description",
                        value: Amount_desc
                    })
                    unfee_rec.setValue({
                        fieldId: "	custrecord_payment_unfee_store",
                        value: pr_store
                    })
                    unfee_rec.setValue({
                        fieldId: "custrecord_payment_report_relative",
                        value: rec.id
                    }) //关联一下payment报告，供参考
                    var ss = unfee_rec.save();
                    log.debug("找不到对应的费用类型，已记录:" + ss, Tranction_type + "," + Amount_type + "," + Amount_desc)
                }
                throw "00 有不在对应关系表里面的费用类型 Tranction_type:" + Tranction_type + ",Amount_type:" + Amount_type + ",Amount_desc：" + Amount_desc
            }
        }
        return {
            relativaJE: relativaJE,
            setTruesettlment: setTruesettlment,
            GetSettlmentFee: GetSettlmentFee,
            getFinanceReport: getFinanceReport,
            CheckJO: CheckJO,
        }
    });