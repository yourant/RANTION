/**
 * @NApiVersion 2.x
 * @NModuleScope public
 *
 * @description  接口脚本
 */

define(["N/record", "N/search", "./core.min", "N/format", './Moment.min',"N/runtime"],
    function (record, search, core, format, moment,runtime) {

         /**
     * 格式化时间，时区转为美国
     * 判断是否为2020.02.01 08:00:00 UTC之后才处理
     * @param {*} dateStr
     */
    
    function getFormatedDate(postDate, endDate, depositDate,startDate) {
        var o_date = moment.utc("2020/02/01 08:00:00").toDate()   //UTC 2020年2月1日 8点，美国0点
        var dateTimeZone = runtime.getCurrentUser().getPreference('TIMEZONE');
        // log.debug(" 0000当前时区",dateTimeZone)
        var dateFormat = runtime.getCurrentUser().getPreference('DATEFORMAT');
        var FF = dateFormat.split(/[^A-Za-z]/g)
        var rs
        if (!depositDate) {
          var post_strs = postDate.substring(0, 10)
          var end_strs = endDate.substring(0, 10)
          var start_strs = startDate.substring(0, 10)
          var end_len = end_strs.split(".")[0].length
          if (end_len < 4) {
            endDate = end_strs.split(".")[2] + "/" + end_strs.split(".")[1] + "/" + end_strs.split(".")[0] + " " + endDate.substring(11, 19)
            postDate = post_strs.split(".")[2] + "/" + post_strs.split(".")[1] + "/" + post_strs.split(".")[0] + " " + postDate.substring(11, 19)
            startDate = start_strs.split(".")[2] + "/" + start_strs.split(".")[1] + "/" + start_strs.split(".")[0] + " " + startDate.substring(11, 19)
          } else {
            if(endDate.indexOf("UTC")>-1)
            endDate = endDate.substring(0, 19)
            if(postDate.indexOf("UTC")>-1)
            postDate = postDate.substring(0, 19)
            if(startDate.indexOf("UTC")>-1)
            startDate = startDate.substring(0, 19)
          }
      
          var ender_date  = moment.utc(endDate).toDate()
          var poster_date  = moment.utc(postDate).toDate()
          var starter_date  = moment.utc(startDate).toDate()
          log.debug("date_post:"+poster_date,"moment（date_post）："+ender_date)
          if(o_date > poster_date){
            //判断posted date是否在2020年2月1日 UTC8点之后才处理
             return "2"
          }
          ender_date = format.format({
            value: ender_date,
            type: format.Type.DATETIME,
            timezone: dateTimeZone 
          });
          poster_date = format.format({
            value:poster_date,
            type: format.Type.DATETIME,
            timezone: dateTimeZone  
          });
          starter_date = format.format({
            value:starter_date,
            type: format.Type.DATETIME,
            timezone:dateTimeZone  
          });
          var Day = ender_date.split(" ")[0].split(/[^0-9]/g)[FF.indexOf("D")]
          var Month = ender_date.split(" ")[0].split(/[^0-9]/g)[FF.indexOf("M")]
          log.debug("Day",Day)
          log.debug("Month",Month)
          if (Day >3 && Month > starter_date.split(" ")[0].split(/[^0-9]/g)[FF.indexOf("M")]) {  //判断endate跨月且大于等于3日就取endDate
            rs = {
              "ps":"end",
              "date":ender_date.split(" ")[0]
            }
          } else {  /**  
                     取 post Date,放当月  
                   */
                  log.debug("  取 post Date,放当月")
                  rs = {
                    "ps":"post",
                    "date":poster_date.split(" ")[0]
                  }
          }
        } else {
          //收款时间 depositDate
          var deposit_strs = depositDate.substring(0, 10)
          var deposit_len = deposit_strs.split(".")[0].length
          if (deposit_len < 4) {
            depositDate = deposit_strs.split(".")[2] + "/" + deposit_strs.split(".")[1] + "/" + deposit_strs.split(".")[0] + " " + depositDate.substring(11, 19)
          } else {
            if(depositDate.indexOf("UTC")>-1)
            depositDate = depositDate.substring(0, 19)
          }
          rs = {
            "ps":"deposit",
            "date":format.format({
              value: moment.utc(depositDate).toDate(),
              type: format.Type.DATETIME,
              timezone: dateTimeZone  //统一转为美国时间 depositDate
            }).split(" ")[0]
          }
        }
        return  rs
      }
        /**
         * 创建付款型号记录
         * @param {*} t //order / refund
         * @param {*} acc 
         * @param {*} entity 
         * @param {*} T_memo  备注型号
         * @param {*} fm  // 期 月份
         */
        function CreatePaymentRec(t, acc, entity, T_memo, fm, currency, deposit_date, num) {
            log.debug("deposit_date:" + deposit_date, entity + "," + T_memo + "," + fm + "," + currency)
            var resd, qty, Tmemo, rs;
            search.create({
                type: "customrecord_payment_rec_store",
                filters: [{
                        name: 'custrecord_payment_type',
                        operator: search.Operator.IS,
                        values: t
                    },
                    {
                        name: 'custrecord_payment_store',
                        operator: "anyof",
                        values: acc
                    },
                    {
                        name: "custrecord_payment_customer",
                        operator: "anyof",
                        values: entity
                    },
                    {
                        name: "custrecord_payment_fm",
                        operator: "is",
                        values: fm
                    },
                    {
                        name: "custrecord_payment_memo_currency",
                        operator: "is",
                        values: currency
                    },
                    {
                        name: "custrecord_payment_resovle",
                        operator: "is",
                        values: false
                    }
                ],
                columns: [{
                        name: "internalid",
                        sort: "DESC"
                    },
                    {
                        name: "custrecord_payment_counts"
                    },
                    {
                        name: "custrecord_payment_memo"
                    }
                ]
            }).run().each(function (rec) {
                Tmemo = rec.getValue("custrecord_payment_memo")
                resd = record.load({
                    type: "customrecord_payment_rec_store",
                    id: rec.id
                })
                qty = Number(rec.getValue("custrecord_payment_counts")) + num
            })
            //付款、退款备注编号，大于5000则增加流水号 T_memo +""
            if (qty <= 4000 && qty) {
                rs = Tmemo
                resd.setValue({
                    fieldId: "custrecord_payment_memo",
                    value: Tmemo
                })
                resd.setValue({
                    fieldId: "custrecord_payment_counts",
                    value: qty
                })
            } else if (qty > 4000 && qty) {
                qty = num
                var ty = Number(Tmemo.split("-")[1]) + num
                Tmemo = Tmemo.split("-")[0] + "-" + ty
                rs = Tmemo
                resd = record.create({
                    type: "customrecord_payment_rec_store"
                })
                resd.setValue({
                    fieldId: "custrecord_payment_memo",
                    value: Tmemo
                })
                resd.setValue({
                    fieldId: "custrecord_payment_counts",
                    value: qty
                })
            } else if (!resd) {
                qty = num
                rs = T_memo
                resd = record.create({
                    type: "customrecord_payment_rec_store"
                })
                resd.setValue({
                    fieldId: "custrecord_payment_memo",
                    value: T_memo
                })
                resd.setValue({
                    fieldId: "custrecord_payment_counts",
                    value: qty
                })
            }
            resd.setValue({
                fieldId: "custrecord_payment_fm",
                value: fm
            })
            resd.setValue({
                fieldId: "name",
                value: rs
            })
            resd.setValue({
                fieldId: "custrecord_payment_type",
                value: t
            })
            resd.setValue({
                fieldId: "custrecord_payment_store",
                value: acc
            })
            resd.setValue({
                fieldId: "custrecord_payment_customer",
                value: entity
            })
            resd.setValue({
                fieldId: "custrecord_payment_memo_currency",
                value: currency
            })
            if (deposit_date)
                resd.setText({
                    fieldId: "custrecord_pay_deposite_date",
                    text: deposit_date
                })
            var sds = resd.save()
            log.debug("OK:" + sds, rs)
            return rs
        }

        /**
         * 检查日记账是否存在
         * @param {*} orderid 
         * @param {*} settlmentid +month 
         * @param {*} settlement_ids 
         * @param {*} memomain 
         */
        function CheckJO(orderid, settlmentid, settlement_ids, memomain, acc) {
            log.debug("memomain:" + memomain, "settlement_ids：" + settlement_ids)
            log.debug("search 的 settlmentid:" + settlmentid, acc)
            var getc
            search.create({
                type: 'journalentry',
                filters: [{
                        name: 'mainline',
                        operator: 'is',
                        values: true
                    },
                    {
                        name: 'custbody_amazon_settlementid',
                        operator: 'is',
                        values: settlmentid
                    },
                    {
                        name: 'custbody_jour_orderid',
                        operator: 'is',
                        values: orderid
                    },
                    {
                        name: 'memomain',
                        operator: 'is',
                        values: memomain
                    }
                ]
            }).run().each(function (e) {
                getc = true
                log.debug("00000该 settlement id 已结算 " + settlmentid, e.id + "," + orderid)
                return false
            })
            if (getc) {
                log.debug("已存在凭证", orderid + "," + settlmentid)
                settlement_ids.map(function (seid) {
                    record.submitFields({
                        type: "customrecord_aio_amazon_settlement",
                        id: seid,
                        values: {
                            custrecord_settle_is_generate_voucher: true
                        }
                    })
                })
                return false
                //结算修复设置T
            } else {
                var ssd = []
                try {
                    var memomain3
                    if (memomain.indexOf("re") == -1) memomain3 = "03"
                    else memomain3 = "re03"
                    search.create({
                        type: 'journalentry',
                        filters: [{
                                name: 'mainline',
                                operator: 'is',
                                values: true
                            },
                            // { name: 'custbody_amazon_settlementid', operator: 'is', values: settlmentid.split("-")[0] },
                            {
                                name: 'custbody_jour_orderid',
                                operator: 'is',
                                values: orderid
                            },
                            {
                                name: 'custbody_pr_store',
                                operator: 'anyof',
                                values: acc
                            },
                            {
                                name: 'memomain',
                                operator: 'is',
                                values: memomain
                            }
                        ],
                        columns: [{
                            name: "internalid",
                            summary: "GROUP"
                        }]
                    }).run().each(function (e) {
                        ssd.push(e.getValue(e.columns[0]))
                        return true
                    })
                    if (ssd.length > 0) {
                        search.create({
                            type: 'journalentry',
                            filters: [{
                                    name: 'mainline',
                                    operator: 'is',
                                    values: true
                                },
                                // { name: 'custbody_amazon_settlementid', operator: 'is', values: settlmentid.split("-")[0] },
                                {
                                    name: 'custbody_jour_orderid',
                                    operator: 'is',
                                    values: orderid
                                },
                                {
                                    name: 'custbody_pr_store',
                                    operator: 'anyof',
                                    values: acc
                                },
                                {
                                    name: 'memomain',
                                    operator: 'is',
                                    values: memomain3
                                }
                            ],
                            columns: [{
                                name: "internalid",
                                summary: "GROUP"
                            }]
                        }).run().each(function (e) {
                            ssd.push(e.getValue(e.columns[0]))
                            return true
                        })
                        log.debug("寻找之前settlmentid 生成的日记账:", ssd)
                        ssd.map(function (ds) {
                            record.delete({
                                type: "journalentry",
                                id: ds
                            })
                        })
                    }
                } catch (error) {}
                return true
            }
        }
        /**
         * 关联日记账用
         * @param {*} jo1_ids 
         * @param {*} jo2_id 
         * @param {*} jo3_id 
         * @param {*} settlement_ids 
         * @param {*} memo_obj  付款备注对象参数 
         */
        function relativaJE(jo1_ids, jo2_id, jo3_id, settlement_ids, memo_obj) {
            log.debug("接口脚本jo1_ids : ", jo1_ids)
            log.debug("接口脚本settlement_ids : ", settlement_ids)
            log.debug("接口脚本memo_obj : ", JSON.stringify(memo_obj))
            if (jo1_ids.length < 10)
                jo1_ids.map(function (j1) {
                    record.submitFields({
                        type: "journalentry",
                        id: j1,
                        values: {
                            custbody_estimate_s: j1,
                            custbody_blot_s: jo2_id,
                            custbody_coll_s: jo3_id,
                        }
                    })
                })
            if (jo2_id)
                record.submitFields({
                    type: "journalentry",
                    id: jo2_id,
                    values: {
                        custbody_estimate_s: jo1_ids,
                        custbody_blot_s: jo2_id,
                        custbody_coll_s: jo3_id,
                        custbody_settlement_inv_ids: JSON.stringify(memo_obj),
                        custbody_set_payment_report_recids: JSON.stringify(settlement_ids),
                    }
                })
            if (jo3_id)
                record.submitFields({
                    type: "journalentry",
                    id: jo3_id,
                    values: {
                        custbody_estimate_s: jo1_ids,
                        custbody_blot_s: jo2_id,
                        custbody_coll_s: jo3_id,
                        custbody_set_payment_report_recids: JSON.stringify(settlement_ids),
                    }
                })
            return true
        }

        function setTruesettlment(settlement_ids) {
            log.debug("接口脚本 settlement_ids :", settlement_ids)
            for (var index = 0; index < settlement_ids.length; index++) {
                record.submitFields({
                    type: "customrecord_aio_amazon_settlement",
                    id: settlement_ids[index],
                    values: {
                        custrecord_settle_checked_is: true,
                        custrecord_settle_is_generate_voucher: true,
                        custrecord_february_undeal: ""
                    }
                })
            }
        }


        /**
         *       //请求财务报告，类型type_fin  orders / refunds
         * @param {*} pr_store 店铺ID
         * @param {*} orderid 订单号
         */
        function getFinanceReport(pr_store, orderid, type_fin) {
            var auth = core.amazon.getAuthByAccountId(pr_store),
                enventlists
            var content = core.amazon.listFinancialEvents(auth, orderid, "", "", "", type_fin)
            log.debug("content:", JSON.stringify(content))
            enventlists = content.refund_event_list
            enventlists.map(function (l) {
                if (Object.prototype.toString.call(l) == "[object Array]") { //如果数组
                    log.debug("[object Array]", Object.prototype.toString.call(l))
                    l.map(function (sl) {
                        log.debug("[object Array].map", Object.prototype.toString.call(sl))
                        createRec(sl, pr_store, type_fin) //存储财务报告cache
                    })
                } else {
                    log.debug("bushi arry")
                    createRec(l, pr_store, type_fin) //存储财务报告cache
                }

            })
        }

        function createRec(l, acc, type_fin) {
            var ship_rec;
            search.create({ //去重
                type: "customrecord_amazon_finances_cahce",
                filters: [{
                        name: 'custrecord_amazon_finances_account',
                        operator: 'is',
                        values: acc
                    },
                    {
                        name: 'custrecord_finance_type',
                        operator: 'is',
                        values: type_fin
                    }, //类型
                    {
                        name: 'custrecord_amazon_finances_orderid',
                        operator: 'is',
                        values: l.amazon_order_id
                    },
                    {
                        name: 'custrecord_amazon_ginances_postdate_txt',
                        operator: 'is',
                        values: l.posted_date
                    },
                ]
            }).run().each(function (e) {
                log.error("you", e.id)
                ship_rec = record.load({
                    type: 'customrecord_amazon_finances_cahce',
                    id: e.id
                })
            })
            if (!ship_rec)
                ship_rec = record.create({
                    type: 'customrecord_amazon_finances_cahce'
                })

            var AMERICA_date = format.format({
                value: moment.utc(l.posted_date).toDate(),
                type: format.Type.DATE,
                timezone: format.Timezone.AMERICA_LOS_ANGELES
            })
            log.debug("l.posted_date " + l.posted_date, AMERICA_date)
            ship_rec.setText({
                fieldId: 'custrecord_amazon_finances_postedafter',
                text: AMERICA_date
            }) //财务报告的发布时间
            ship_rec.setValue({
                fieldId: 'custrecord_amazon_ginances_postdate_txt',
                value: l.posted_date
            }) //亚马逊返回的时间文本，不做修改
            ship_rec.setValue({
                fieldId: 'custrecord_amazon_finances_account',
                value: acc
            })
            ship_rec.setValue({
                fieldId: 'custrecord_amazon_finances_orderid',
                value: l.amazon_order_id
            })
            ship_rec.setValue({
                fieldId: 'custrecord_amazon_finances_body',
                value: JSON.stringify(l)
            })

            ship_rec.setValue({
                fieldId: 'custrecord_finance_type',
                value: type_fin
            })
            var cache_id = ship_rec.save()
            log.audit("lie.map OK:", cache_id)

        }
        /**
         *  //查找对应类型科目
         * @param {*} Amount_type 
         * @param {*} Amount_desc 
         * @param {*} Tranction_type 
         */
        function GetSettlmentFee(Amount_type, Amount_desc, Tranction_type) {
            var fils = []
            Amount_type ? fils.push({
                name: 'custrecord_amazon_amount_type',
                operator: 'is',
                values: Amount_type
            }) : fils.push({
                name: 'custrecord_amazon_amount_type',
                operator: 'isempty'
            })
            Amount_desc ? fils.push({
                name: 'custrecord_amazon_amount_description',
                operator: 'is',
                values: Amount_desc
            }) : fils.push({
                name: 'custrecord_amazon_amount_description',
                operator: 'isempty'
            })
            Tranction_type ? fils.push({
                name: 'custrecord_amazon_transaction_type',
                operator: 'is',
                values: Tranction_type
            }) : fils.push({
                name: 'custrecord_amazon_transaction_type',
                operator: 'isempty'
            })
            var incomeaccount
            search.create({
                type: 'customrecord_cost_type_vs_cost_item',
                filters: fils,
                columns: [{
                        name: 'custrecord_item_incomeaccount'
                    },
                    {
                        name: 'custrecord_allowance_item'
                    },
                ]
            }).run().each(function (rec) {
                incomeaccount = rec.getValue("custrecord_item_incomeaccount")
                if (!incomeaccount) //科目字段为空就搜索费用货品下面的科目
                    search.create({
                        type: 'item',
                        filters: [{
                            name: 'internalid',
                            operator: 'is',
                            values: rec.getValue("custrecord_allowance_item")
                        }, ],
                        columns: [{
                            name: 'incomeaccount'
                        }]
                    }).run().each(function (e) {
                        incomeaccount = e.getValue(e.columns[0])
                    })
            })

            if (incomeaccount) {
                return incomeaccount
            } else {
                //找不到对应的费用类型 记录下来 customrecord_amazon_payment_unfee_type
                var fils_unfee = [],
                    unfee_rec
                Tranction_type ? fils_unfee.push({
                    name: 'custrecord_payment_transation_type',
                    operator: 'is',
                    values: Tranction_type
                }) : fils.push({
                    name: 'custrecord_amazon_amount_type',
                    operator: 'isempty'
                })
                Amount_type ? fils_unfee.push({
                    name: 'custrecord_payment_amount_type',
                    operator: 'is',
                    values: Amount_type
                }) : fils.push({
                    name: 'custrecord_amazon_amount_description',
                    operator: 'isempty'
                })
                Amount_desc ? fils_unfee.push({
                    name: 'custrecord_payment_amount_description',
                    operator: 'is',
                    values: Amount_desc
                }) : fils.push({
                    name: 'custrecord_amazon_transaction_type',
                    operator: 'isempty'
                })
                search.create({
                    type: "customrecord_amazon_payment_unfee_type",
                    filters: fils_unfee
                }).run().each(function (e) {
                    unfee_rec = e.id
                })
                if (!unfee_rec) {
                    unfee_rec = record.create({
                        type: "customrecord_amazon_payment_unfee_type"
                    })
                    unfee_rec.setValue({
                        fieldId: "custrecord_payment_transation_type",
                        value: Tranction_type
                    })
                    unfee_rec.setValue({
                        fieldId: "custrecord_payment_amount_type",
                        value: Amount_type
                    })
                    unfee_rec.setValue({
                        fieldId: "custrecord_payment_amount_description",
                        value: Amount_desc
                    })
                    unfee_rec.setValue({
                        fieldId: "	custrecord_payment_unfee_store",
                        value: pr_store
                    })
                    unfee_rec.setValue({
                        fieldId: "custrecord_payment_report_relative",
                        value: rec.id
                    }) //关联一下payment报告，供参考
                    var ss = unfee_rec.save();
                    log.debug("找不到对应的费用类型，已记录:" + ss, Tranction_type + "," + Amount_type + "," + Amount_desc)
                }
                throw "00 有不在对应关系表里面的费用类型 Tranction_type:" + Tranction_type + ",Amount_type:" + Amount_type + ",Amount_desc：" + Amount_desc
            }
        }
        return {
            relativaJE: relativaJE,
            setTruesettlment: setTruesettlment,
            GetSettlmentFee: GetSettlmentFee,
            getFinanceReport: getFinanceReport,
            CheckJO: CheckJO,
            CreatePaymentRec: CreatePaymentRec,
            getFormatedDate: getFormatedDate,
        }
    });