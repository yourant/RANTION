/**
 * @NApiVersion 2.x
 * @NModuleScope public
 *
 * @description  接口脚本
 */

define(['N/record', 'N/search', './core.min', 'N/format', './Moment.min', 'N/runtime', 'N/log'],
  function (record, search, core, format, moment, runtime, log) {

    /**
          * 区分s订单的查找
          * @param {*} order_id 
          * @param {*} merchant_order_id 
          * @param {*} acc_search 
          */
    function SearchSO (order_id, merchant_order_id, acc_search, cl_date, Trp) {
      var fils = [
          { name: 'custbody_order_locaiton', operator: 'anyof', values: acc_search},
          { name: 'mainline', operator: 'is', values: true }
        ],rs = {}
      var SS = false
      if (order_id.charAt(0) == 'S') {
        log.debug('是属于S开头的订单', merchant_order_id)
        SS = true
        fils.push({ name: 'custbody_sotck_account', operator: 'anyof', values: acc_search })
        fils.push({ name: 'custbodyfulfillment_stock_so', operator: 'is', values: merchant_order_id })
      } else if (order_id) {
        fils.push({ name: 'custbody_order_locaiton', operator: 'anyof', values: acc_search})
        fils.push({ name: 'poastext', operator: 'is', values: order_id })
      }
      log.debug('fil', fils)
      search.create({
        type: record.Type.SALES_ORDER,
        filters: fils,
        columns: [
          { name: 'status' },
          { name: 'custbody_order_locaiton' },
          { name: 'entity' },
          { name: 'subsidiary' },
          { name: 'currency'},
          { name: 'custbody_aio_s_fulfillment_channel' },
          { name: 'otherrefnum' },
          { name: 'department' },
          { name: 'custbodyfulfillment_stock_so' }
        ]
      }).run().each(function (rec) {
        log.debug('status:', rec.getValue('status'))
        rs['so_id'] = rec.id
        rs['acc'] = rec.getValue('custbody_order_locaiton')
        rs['acc_text'] = rec.getText('custbody_order_locaiton')
        rs['ord_status'] = rec.getValue('status')
        rs['subsidiary'] = rec.getValue('subsidiary')
        rs['currency'] = rec.getValue('currency')
        rs['entity'] = rec.getValue('entity')
        rs['dept'] = rec.getValue('department')
        rs['fulfill_channel'] = rec.getValue('custbody_aio_s_fulfillment_channel')
        if (SS)
          rs['otherrefnum'] = rec.getValue('custbodyfulfillment_stock_so')
        else
          rs['otherrefnum'] = rec.getValue('otherrefnum')

        // 检测是否是先未发货已结算,只存在于FBM订单

        if (rec.getValue('status') == 'pendingFulfillment' && rec.getValue('custbody_aio_s_fulfillment_channel') == 'MFN') {
          var fulfill = 'unfulfill'
          log.debug('查找发货/退货报告', 'postdate:' + cl_date)
          if (Trp == 'order') {
            search.create({
              type: 'customrecord_amazon_sales_report',
              filters: [
                { name: 'custrecord_amazon_order_id', operator: search.Operator.IS, values: order_id },
                { name: 'custrecord_shipment_date', operator: search.Operator.ONORBEFORE, values: cl_date },
                { name: 'custrecord_shipment_account', operator: search.Operator.IS, values: acc_search }
              ]
            }).run().each(function (rec) {
              fulfill = 'fulfill'
            })
          }else if (Trp == 'refund') {
            search.create({
              type: 'customerdeposit',
              filters: [
                { name: 'salesorder', operator: search.Operator.ANYOF, values: rs['so_id']}
              ]
            }).run().each(function (rec) {
              fulfill = 'isrefund'
              rs['cust_depo'] = rec.id
            })
          }
          rs['fulfill'] = fulfill
        }
      })
      log.debug('rs', rs)
      return rs
    }
    /**
     * 查找sku 对应关系
     */
    function getskuId (sellersku, amazon_account_id, amazon_order_id) {
      var skuid
      try {
        var fils = [
          {
            name: 'name',
            operator: 'is',
            values: sellersku
          } // sku
        // , { // 存在货品非活动的情况
        //     name: 'isinactive',
        //     join: 'custrecord_dps_amazon_ns_sku',
        //     operator: 'is',
        //     values: false
        // }
        ]
        // if(amazon_account_id){
        //     fils.push({
        //     name: 'custrecord_ass_account',
        //     operator: 'anyof',
        //     values: amazon_account_id
        //     })
        // }
        search.create({
          type: 'customrecord_aio_amazon_seller_sku',
          filters: fils,
          columns: [
            'custrecord_ass_sku'
          ]
        }).run().each(function (rec) {
          skuid = rec.getValue('custrecord_ass_sku')
          return false
        })
        if (!skuid) {
          var sku_notes, counts = 0
          search.create({
            type: 'customrecord_no_sku_record',
            filters: [{
              name: 'custrecord_not_on_sku',
              operator: 'is',
              values: sellersku
            },
              {
                name: 'custrecord_account',
                operator: 'is',
                values: amazon_account_id
              }
            ],
            columns: [{
              name: 'custrecord_total_orders'
            }]
          }).run().each(function (e) {
            counts = e.getValue('custrecord_total_orders')
            sku_notes = record.load({
              type: 'customrecord_no_sku_record',
              id: e.id
            })
          })
          if (!sku_notes) {
            sku_notes = record.create({
              type: 'customrecord_no_sku_record'
            })
          }
          sku_notes.setValue({
            fieldId: 'custrecord_not_on_sku',
            value: sellersku
          })
          sku_notes.setValue({
            fieldId: 'custrecord_orderno',
            value: 'Amazon'
          })
          sku_notes.setValue({
            fieldId: 'custrecord_account',
            value: amazon_account_id
          })
          sku_notes.setValue({
            fieldId: 'custrecord_total_orders',
            value: Number(counts) + 1
          })
          sku_notes.save()
          log.debug('找不到sku，已记录下来')
          log.debug('mark_resolved', amazon_order_id)

          throw '找不到货品, 或者货品已经非活动了(SKU): ' + sellersku.trim()
        }
      } catch (e) {
        log.error('assemblyitem error :::', e)
      }
      return skuid
    }

    /**
     * 搜索seller id相同的店铺ID
     * @param {*} sellerid 
     */
    function getSearchAccount (sellerid) {
      // 搜索销售订单获取客户
      var acc_search = []
      search.create({
        type: 'customrecord_aio_account',
        filters: [{ name: 'custrecord_aio_seller_id', operator: 'is', values: sellerid }]
      }).run().each(function (rec) {
        acc_search.push(rec.id)
        return true
      })
      log.debug('acc_search', acc_search)
      return acc_search
    }

    /**
     * 根据markectplace 拿到对应站点的店铺
     * @param {*} acc 
     * @param {*} marketplace_name 
     * @param {*} acc_text 
     */
    function GetstoreInEU (acc, marketplace_name, acc_text) {
      var sellerid, account = {}, feck = false,entity,subsidiary
      search.create({
        type: 'customrecord_aio_account',
        filters: [
          { name: 'internalidnumber', operator: 'equalto', values: Number(acc) }
        ], columns: [
          { name: 'custrecord_aio_seller_id' },
          { name: 'custrecord_aio_customer' },
          { name: 'custrecord_aio_subsidiary' }
        ]
      }).run().each(function (e) {
        sellerid = e.getValue('custrecord_aio_seller_id')
        entity = e.getValue('custrecord_aio_customer')
        subsidiary = e.getValue('custrecord_aio_subsidiary')
      })
      marketplace_name = marketplace_name.substring(marketplace_name.length - 2, marketplace_name.length)
      search.create({
        type: 'customrecord_aio_account',
        filters: [
          { name: 'custrecord_aio_seller_id', operator: 'is', values: sellerid }
        ], columns: [
          { name: 'custrecord_aio_seller_id' },
          { name: 'custrecord_aio_amazon_marketplace', join: 'custrecord_aio_enabled_sites' },
          { name: 'name' },
          { name: 'custrecord_aio_customer' },
          { name: 'custrecord_aio_subsidiary' }
        ]
      }).run().each(function (e) {
        var enbelsite = e.getValue(e.columns[1])
        entity = e.getValue('custrecord_aio_customer')
        subsidiary = e.getValue('custrecord_aio_subsidiary')
        if (marketplace_name.toUpperCase() == enbelsite) {
          account = {
            'acc': e.id,
            'acc_text': e.getValue('name'),
            'entity': entity,
            'subsidiary': subsidiary
          }
          feck = true
        }
        return true
      })
      if (!feck) {
        account = {
          'acc': acc,
          'acc_text': acc_text,
          'entity': entity,
          'subsidiary': subsidiary
        }
      }
      log.debug('拿到的account', account)
      return account
    }

    /**
     * 根据货币拿到对应站点的店铺,仅限CAD,MXD,USD;
     * @param {*} acc 
     * @param {*} marketplace_name 
     * @param {*} acc_text 
     */
    function GetstoreofCurrency (currency, acc) {
      var sellerid,entity,subsidiary,rs =acc;
      if(currency == "CAD" ||currency == "MXD"||currency == "USD" ){
        search.create({
          type: 'customrecord_aio_account',
          filters: [
            { name: 'internalidnumber', operator: 'equalto', values: Number(acc) }
          ], columns: [
            { name: 'custrecord_aio_seller_id' },
            { name: 'custrecord_aio_customer' },
            { name: 'custrecord_aio_subsidiary' }
          ]
        }).run().each(function (e) {
          sellerid = e.getValue('custrecord_aio_seller_id')
          entity = e.getValue('custrecord_aio_customer')
          subsidiary = e.getValue('custrecord_aio_subsidiary')
        })
        search.create({
          type: 'customrecord_aio_account',
          filters: [
            { name: 'custrecord_aio_seller_id', operator: 'is', values: sellerid }
          ], columns: [
            { name: 'custrecord_aio_seller_id' },
            { name: 'custrecord_aio_currency' }
          ]
        }).run().each(function (e) {
          if (e.getText('custrecord_aio_currency') == currency) {
            rs = e.id
          }
          return true
        })
      }
    
      return rs
    }
    /**
     * 创建付款型号记录
     * @param {*} t //order / refund
     * @param {*} acc 
     * @param {*} entity 
     * @param {*} T_memo  备注型号
     * @param {*} fm  // 期 月份
     */
    function CreatePaymentRec (t, acc, entity, T_memo, fm, currency, deposit_date, num) {
      log.debug('deposit_date:' + deposit_date, entity + ',' + T_memo + ',' + fm + ',' + currency)
      var resd, qty, Tmemo, rs
      search.create({
        type: 'customrecord_payment_rec_store',
        filters: [{
          name: 'custrecord_payment_type',
          operator: search.Operator.IS,
          values: t
        },
          {
            name: 'custrecord_payment_store',
            operator: 'anyof',
            values: acc
          },
          {
            name: 'custrecord_payment_customer',
            operator: 'anyof',
            values: entity
          },
          {
            name: 'custrecord_payment_fm',
            operator: 'is',
            values: fm
          },
          {
            name: 'custrecord_payment_memo_currency',
            operator: 'is',
            values: currency
          },
          {
            name: 'custrecord_payment_resovle',
            operator: 'is',
            values: false
          }
        ],
        columns: [{
          name: 'internalid',
          sort: 'DESC'
        },
          {
            name: 'custrecord_payment_counts'
          },
          {
            name: 'custrecord_payment_memo'
          }
        ]
      }).run().each(function (rec) {
        Tmemo = rec.getValue('custrecord_payment_memo')
        resd = record.load({
          type: 'customrecord_payment_rec_store',
          id: rec.id
        })
        qty = Number(rec.getValue('custrecord_payment_counts')) + num
      })
      // 付款、退款备注编号，大于5000则增加流水号 T_memo +""
      if (qty <= 4000 && qty) {
        rs = Tmemo
        resd.setValue({
          fieldId: 'custrecord_payment_memo',
          value: Tmemo
        })
        resd.setValue({
          fieldId: 'custrecord_payment_counts',
          value: qty
        })
      } else if (qty > 4000 && qty) {
        qty = num
        var ty = Number(Tmemo.split('-')[1]) + num
        Tmemo = Tmemo.split('-')[0] + '-' + ty
        rs = Tmemo
        resd = record.create({
          type: 'customrecord_payment_rec_store'
        })
        resd.setValue({
          fieldId: 'custrecord_payment_memo',
          value: Tmemo
        })
        resd.setValue({
          fieldId: 'custrecord_payment_counts',
          value: qty
        })
      } else if (!resd) {
        qty = num
        rs = T_memo
        resd = record.create({
          type: 'customrecord_payment_rec_store'
        })
        resd.setValue({
          fieldId: 'custrecord_payment_memo',
          value: T_memo
        })
        resd.setValue({
          fieldId: 'custrecord_payment_counts',
          value: qty
        })
      }
      resd.setValue({
        fieldId: 'custrecord_payment_fm',
        value: fm
      })
      resd.setValue({
        fieldId: 'name',
        value: rs
      })
      resd.setValue({
        fieldId: 'custrecord_payment_type',
        value: t
      })
      resd.setValue({
        fieldId: 'custrecord_payment_store',
        value: acc
      })
      resd.setValue({
        fieldId: 'custrecord_payment_customer',
        value: entity
      })
      resd.setValue({
        fieldId: 'custrecord_payment_memo_currency',
        value: currency
      })
      if (deposit_date)
        resd.setText({
          fieldId: 'custrecord_pay_deposite_date',
          text: deposit_date
        })
      var sds = resd.save()
      log.debug('OK:' + sds, rs)
      return rs
    }

    /**
     * 检查日记账是否存在
     * @param {*} orderid 
     * @param {*} settlmentid +month 
     * @param {*} settlement_ids 
     * @param {*} memomain 
     */
    function CheckJO (orderid, settlmentid, settlement_ids, memomain, acc) {
      log.debug('memomain:' + memomain, 'settlement_ids：' + settlement_ids)
      log.debug('search 的 settlmentid:' + settlmentid, acc)
      var getc,fils = [
          {
            name: 'mainline',
            operator: 'is',
            values: true
          },
          {
            name: 'custbody_amazon_settlementid',
            operator: 'is',
            values: settlmentid
          }
      ]
      if (orderid)
        fils.push({
          name: 'custbody_jour_orderid',
          operator: 'is',
          values: orderid
        })
      //  if(memomain)
      //  fils.push(  {
      //     name: 'memomain',
      //     operator: 'is',
      //     values: memomain
      // })
      search.create({
        type: 'journalentry',
        filters: fils
      }).run().each(function (e) {
        getc = true
        log.debug('00000该 settlement id 已结算 ' + settlmentid, e.id + ',' + orderid)
      })
      if (getc) {
        log.debug('已存在凭证', orderid + ',' + settlmentid)
        settlement_ids.map(function (seid) {
          record.submitFields({
            type: 'customrecord_aio_amazon_settlement',
            id: seid,
            values: {
              custrecord_settle_is_generate_voucher: true
            }
          })
        })
        return false
      // 结算修复设置T
      }
      return true
    }
    /**
     * 关联日记账用
     * @param {*} jo1_ids 
     * @param {*} jo2_id 
     * @param {*} jo3_id 
     * @param {*} settlement_ids 
     * @param {*} memo_obj  付款备注对象参数 
     */
    function relativaJE (jo1_ids, jo2_id, jo3_id, settlement_ids, memo_obj) {
      log.debug('接口脚本jo1_ids : ', jo1_ids)
      log.debug('接口脚本settlement_ids : ', settlement_ids)
      log.debug('接口脚本memo_obj : ', JSON.stringify(memo_obj))
      if (jo1_ids.length < 10)
        jo1_ids.map(function (j1) {
          record.submitFields({
            type: 'journalentry',
            id: j1,
            values: {
              custbody_estimate_s: j1,
              custbody_blot_s: jo2_id,
              custbody_coll_s: jo3_id
            }
          })
        })
      if (jo2_id)
        record.submitFields({
          type: 'journalentry',
          id: jo2_id,
          values: {
            custbody_estimate_s: jo1_ids,
            custbody_blot_s: jo2_id,
            custbody_coll_s: jo3_id,
            custbody_settlement_inv_ids: JSON.stringify(memo_obj),
            custbody_set_payment_report_recids: JSON.stringify(settlement_ids)
          }
        })
      if (jo3_id)
        record.submitFields({
          type: 'journalentry',
          id: jo3_id,
          values: {
            custbody_estimate_s: jo1_ids,
            custbody_blot_s: jo2_id,
            custbody_coll_s: jo3_id,
            custbody_set_payment_report_recids: JSON.stringify(settlement_ids)
          }
        })
      return true
    }

    function setTruesettlment (settlement_ids) {
      log.debug('接口脚本 settlement_ids :', settlement_ids)
      for (var index = 0; index < settlement_ids.length; index++) {
        record.submitFields({
          type: 'customrecord_aio_amazon_settlement',
          id: settlement_ids[index],
          values: {
            custrecord_settle_checked_is: true,
            custrecord_settle_is_generate_voucher: true,
            custrecord_february_undeal: ''
          }
        })
      }
    }

    const martk_corr = { // 科目配置表的报告类型字段
      'EU': 2,
      'JP': 2,
      'UK': 2,
      'IT': 2,
      'ES': 2,
      'DE': 2,
      'FR': 2,
      'US': 1,
      'CA': 1,
      'MX': 1,
      'AU': 1,
      'SG': 1
    }
    /**
     *       //请求财务报告，类型type_fin  orders / refunds
     * @param {*} pr_store 店铺ID
     * @param {*} orderid 订单号
     */
    function getFinanceReport (pr_store, orderid, type_fin) {
      var auth = core.amazon.getAuthByAccountId(pr_store),
        enventlists
      var content = core.amazon.listFinancialEvents(auth, orderid, '', '', '', type_fin)
      log.debug('content:', JSON.stringify(content))
      enventlists = content.refund_event_list
      enventlists.map(function (l) {
        if (Object.prototype.toString.call(l) == '[object Array]') { // 如果数组
          log.debug('[object Array]', Object.prototype.toString.call(l))
          l.map(function (sl) {
            log.debug('[object Array].map', Object.prototype.toString.call(sl))
            createRec(sl, pr_store, type_fin) // 存储财务报告cache
          })
        } else {
          log.debug('bushi arry')
          createRec(l, pr_store, type_fin) // 存储财务报告cache
        }
      })
    }
    /**   
     * 存储财务报告数据，cache；
     */
    function createRec (l, acc, type_fin) {
      var ship_rec
      search.create({ // 去重
        type: 'customrecord_amazon_finances_cahce',
        filters: [{
          name: 'custrecord_amazon_finances_account',
          operator: 'is',
          values: acc
        },
          {
            name: 'custrecord_finance_type',
            operator: 'is',
            values: type_fin
          }, // 类型
          {
            name: 'custrecord_amazon_finances_orderid',
            operator: 'is',
            values: l.amazon_order_id
          },
          {
            name: 'custrecord_amazon_ginances_postdate_txt',
            operator: 'is',
            values: l.posted_date
          }
        ]
      }).run().each(function (e) {
        log.error('you', e.id)
        ship_rec = record.load({
          type: 'customrecord_amazon_finances_cahce',
          id: e.id
        })
      })
      if (!ship_rec)
        ship_rec = record.create({
          type: 'customrecord_amazon_finances_cahce'
        })

      var AMERICA_date = format.format({
        value: moment.utc(l.posted_date).toDate(),
        type: format.Type.DATE,
        timezone: format.Timezone.AMERICA_LOS_ANGELES
      })
      log.debug('l.posted_date ' + l.posted_date, AMERICA_date)
      ship_rec.setText({
        fieldId: 'custrecord_amazon_finances_postedafter',
        text: AMERICA_date
      }) // 财务报告的发布时间
      ship_rec.setValue({
        fieldId: 'custrecord_amazon_ginances_postdate_txt',
        value: l.posted_date
      }) // 亚马逊返回的时间文本，不做修改
      ship_rec.setValue({
        fieldId: 'custrecord_amazon_finances_account',
        value: acc
      })
      ship_rec.setValue({
        fieldId: 'custrecord_amazon_finances_orderid',
        value: l.amazon_order_id
      })
      ship_rec.setValue({
        fieldId: 'custrecord_amazon_finances_body',
        value: JSON.stringify(l)
      })

      ship_rec.setValue({
        fieldId: 'custrecord_finance_type',
        value: type_fin
      })
      var cache_id = ship_rec.save()
      log.audit('lie.map OK:', cache_id)
    }
    /**
     *  //查找对应类型科目,没有则计入差异表
     * @param {*} Amount_type 
     * @param {*} Amount_desc 
     * @param {*} Tranction_type 
     */
    function GetSettlmentFee (Amount_type, Amount_desc, Tranction_type, markectplace, amount, siteId, pr_store) {
      // log.debug(' inter Amount_type' + Amount_type, 'Amount_desc: ' + Amount_desc)
      // log.debug('inter Tranction_type' + Tranction_type, 'markectplace:' + markectplace)
      // log.debug('inter amount', amount)
      var fils = []
      Amount_type ? fils.push({
        name: 'custrecordamazon_amount_type',
        operator: 'is',
        values: Amount_type
      }) : fils.push({
        name: 'custrecordamazon_amount_type',
        operator: 'isempty'
      })
      Amount_desc ? fils.push({
        name: 'custrecordamazon_amount_description',
        operator: 'is',
        values: Amount_desc
      }) : fils.push({
        name: 'custrecordamazon_amount_description',
        operator: 'isempty'
      })
      Tranction_type ? fils.push({
        name: 'custrecordamazon_transaction_type',
        operator: 'is',
        values: Tranction_type
      }) : fils.push({
        name: 'custrecordamazon_transaction_type',
        operator: 'isempty'
      })
      markectplace ? fils.push({
        name: 'custrecord_amazon_report_type',
        operator: 'anyof',
        values: martk_corr[markectplace]
      }) : fils.push({
        name: 'custrecord_amazon_report_type',
        operator: 'isempty'
      })
      var incomeaccount,L_memo
      search.create({
        type: 'customrecord_order_account_corr',
        filters: fils,
        columns: [
          {name: 'custrecord_account_type'},
          {name: 'custrecord_memo_accounting'}
        ]
      }).run().each(function (rec) {
        incomeaccount = rec.getValue('custrecord_account_type')
        L_memo = rec.getValue('custrecord_memo_accounting')
      })

      if (incomeaccount) {
        var rs = {'incomeaccount': incomeaccount,  'L_memo': L_memo}
        return rs
      } else {
        // 找不到对应的费用类型 记录下来 customrecord_amazon_payment_unfee_type
        var fils_unfee = [],
          unfee_rec
        Tranction_type ? fils_unfee.push({
          name: 'custrecord_config_defer_trantype',
          operator: 'is',
          values: Tranction_type
        }) : fils.push({
          name: 'custrecord_config_defer_trantype',
          operator: 'isempty'
        })
        Amount_type ? fils_unfee.push({
          name: 'custrecord_config_defer_amounttype',
          operator: 'is',
          values: Amount_type
        }) : fils.push({
          name: 'custrecord_config_defer_amounttype',
          operator: 'isempty'
        })
        Amount_desc ? fils_unfee.push({
          name: 'custrecord_config_defer_amountdesc',
          operator: 'is',
          values: Amount_desc
        }) : fils.push({
          name: 'custrecord_config_defer_amountdesc',
          operator: 'isempty'
        })
        siteId ? fils_unfee.push({
          name: 'custrecord_config_defer_markectplace',
          operator: 'anyof',
          values: siteId
        }) : fils.push({
          name: 'custrecord_config_defer_markectplace',
          operator: 'isempty'
        })
        amount ? fils_unfee.push({
          name: 'custrecord_config_defer_amount',
          operator: 'equalto',
          values: amount
        }) : fils.push({
          name: 'custrecord_config_defer_amount',
          operator: 'isempty'
        })

        search.create({
          type: 'customrecord_amazon_config_defer',
          filters: fils_unfee
        }).run().each(function (e) {
          unfee_rec = e.id
        })
        if (!unfee_rec) {
          unfee_rec = record.create({
            type: 'customrecord_amazon_config_defer'
          })
          unfee_rec.setValue({
            fieldId: 'custrecord_config_defer_trantype',
            value: Tranction_type
          })
          unfee_rec.setValue({
            fieldId: 'custrecord_config_defer_amounttype',
            value: Amount_type
          })
          unfee_rec.setValue({
            fieldId: 'custrecord_config_defer_amountdesc',
            value: Amount_desc
          })
          unfee_rec.setValue({
            fieldId: 'custrecord_config_defer_acc',
            value: pr_store
          })
          unfee_rec.setValue({
            fieldId: 'custrecord_config_defer_markectplace',
            value: siteId
          })
          unfee_rec.setValue({
            fieldId: 'custrecord_config_defer_amount',
            value: amount
          })
          var ss = unfee_rec.save()
          log.debug('找不到对应的费用类型，已记录:' + ss, Tranction_type + ',' + Amount_type + ',' + Amount_desc)
        }
        return false
      // throw "00 有不在对应关系表里面的费用类型 Tranction_type:" + Tranction_type + ",Amount_type:" + Amount_type + ",Amount_desc：" + Amount_desc
      }
    }

    /**
    * 报关的时间格式化
    * 判断是否为2020.02.01 08:00:00 UTC之后才处理
    * @param {*} dateStr
    * is_tran 表示需要截取 北京时间的6月1日 00：00：00之后 的数据
    */

    function getFormatedDate (postDate, endDate, depositDate, startDate, is_tran) {
      var dateTimeZone = runtime.getCurrentUser().getPreference('TIMEZONE')
      log.debug(' 0000当前时区', dateTimeZone)
      dateTimeZone = 'Asia/Hong_Kong'; // 默认为北京时间
      var dateFormat = runtime.getCurrentUser().getPreference('DATEFORMAT')
      var o_date = moment('2020/5/31 08:00:00').format(dateFormat)
      var FF = dateFormat.split(/[^A-Za-z]/g)
      log.debug('FF' + FF, depositDate)
      var rs = {}
      if (JSON.stringify(postDate).indexOf(',') > -1) {
        endDate = endDate.replace(/,/g, '.')
        postDate = postDate.replace(/,/g, '.')
        startDate = startDate.replace(/,/g, '.')
      }
      if (!depositDate) {
        var post_strs = postDate.substring(0, 10)
        var end_strs = endDate.substring(0, 10)
        var start_strs = startDate.substring(0, 10)
        var end_len = end_strs.split(/.,/)[0].length
        if (end_len < 4) {
          endDate = end_strs.split('.')[2] + '/' + end_strs.split('.')[1] + '/' + end_strs.split('.')[0] + ' 08:00:00'
          postDate = post_strs.split('.')[2] + '/' + post_strs.split('.')[1] + '/' + post_strs.split('.')[0] + ' 08:00:00'
          startDate = start_strs.split('.')[2] + '/' + start_strs.split('.')[1] + '/' + start_strs.split('.')[0] + ' 08:00:00'
        // startDate = start_strs.split('.')[2] + '/' + start_strs.split('.')[1] + '/' + start_strs.split('.')[0] + ' ' + startDate.substring(11, 19)
        } else {
          if (endDate.indexOf('UTC') > -1)
            endDate = endDate.substring(0, 19)
          if (postDate.indexOf('UTC') > -1)
            postDate = postDate.substring(0, 19)
          if (startDate.indexOf('UTC') > -1)
            startDate = startDate.substring(0, 19)
        }

        var ender_date = moment.utc(endDate).toDate()
        var poster_date = moment.utc(postDate).toDate()
        var starter_date = moment.utc(startDate).toDate()
        log.debug('date_post:' + poster_date, 'moment（date_post）：' + ender_date)
        o_date = format.format({
          value: o_date,
          type: format.Type.DATETIME,
          timezone: dateTimeZone
        })

        ender_date = format.format({
          value: ender_date,
          type: format.Type.DATETIME,
          timezone: dateTimeZone
        })
        poster_date = format.format({
          value: poster_date,
          type: format.Type.DATETIME,
          timezone: dateTimeZone
        })
        starter_date = format.format({
          value: starter_date,
          type: format.Type.DATETIME,
          timezone: dateTimeZone
        })

        if (o_date > ender_date && is_tran) {
          return {
            'date': '2'
          }
        }
        var Day = ender_date.split(/[^0-9]/g)[FF.indexOf('D')]
        var Month = ender_date.split(/[^0-9]/g)[FF.indexOf('M')]
        var Year = ender_date.split(/[^0-9]/g)[FF.indexOf('YYYY')]
        log.debug('Day', Day)
        log.debug('Month', Month)
        if (Day > 3 && Month > starter_date.split(' ')[0].split(/[^0-9]/g)[FF.indexOf('M')]) { // 判断endate跨月且大于等于3日就取endDate
          rs = {
            'ps': 'end',
            'date': ender_date.split(' ')[0],
            'Year': Year,
            'Day': Day,
            'Month': Month
          }
        } else { /**  
                     取 post Date,放当月  
                   */
          log.debug('  取 post Date,放当月')
          rs = {
            'ps': 'post',
            'date': poster_date,
            'Year': poster_date.split(/[^0-9]/g)[FF.indexOf('YYYY')],
            'Day': poster_date.split(/[^0-9]/g)[FF.indexOf('D')],
            'Month': poster_date.split(/[^0-9]/g)[FF.indexOf('M')]
          }
        }
      } else {
        // 收款时间 depositDate
        if (JSON.stringify(depositDate).indexOf(',') > -1) {
          depositDate = depositDate.replace(/,/g, '.')
        }
        var deposit_strs = depositDate.substring(0, 10)
        var deposit_len = deposit_strs.split('.')[0].length
        if (deposit_len < 4) {
          depositDate = deposit_strs.split('.')[2] + '/' + deposit_strs.split('.')[1] + '/' + deposit_strs.split('.')[0] + ' 08:00:00'
        // depositDate = deposit_strs.split('.')[2] + '/' + deposit_strs.split('.')[1] + '/' + deposit_strs.split('.')[0] + ' ' + depositDate.substring(11, 19)
        } else {
          depositDate = deposit_strs + ' 08:00:00'
        }
        var depostie = moment(depositDate).format(dateFormat)
        // var depostie = format.format({
        //   value: moment.utc(depositDate).toDate(),
        //   type: format.Type.DATETIME,
        //   timezone: dateTimeZone // depositDate
        // })
        // o_date = format.format({
        //   value: o_date,
        //   type: format.Type.DATETIME,
        //   timezone: dateTimeZone // depositDate
        // })
        log.debug('depostie: ' + JSON.stringify(depostie), JSON.stringify(o_date))

        var depo1 = depostie.split(/[^0-9]/g)[FF.indexOf('YYYY')] + depostie.split(/[^0-9]/g)[FF.indexOf('M')]
        var depo2 = o_date.split(/[^0-9]/g)[FF.indexOf('YYYY')] + o_date.split(/[^0-9]/g)[FF.indexOf('M')]
        log.debug('depo1 ' + depo1, depostie)
        log.debug('depo2 ' + depo2, o_date)
        if (depo2 >= depo1 && is_tran) {
          var rs = {
            'date': '2'
          }
          return rs
        }
        var rs = {
          'ps': 'deposit',
          'date': depostie,
          'Year': depostie.split(/[^0-9]/g)[FF.indexOf('YYYY')],
          'Day': depostie.split(/[^0-9]/g)[FF.indexOf('D')],
          'Month': depostie.split(/[^0-9]/g)[FF.indexOf('M')]
        }
      }

      log.debug('rs的時間為：', rs)
      return rs
    }

    return {
      relativaJE: relativaJE,
      setTruesettlment: setTruesettlment,
      GetSettlmentFee: GetSettlmentFee,
      getFinanceReport: getFinanceReport,
      CheckJO: CheckJO,
      CreatePaymentRec: CreatePaymentRec,
      getSearchAccount: getSearchAccount,
      getskuId: getskuId,
      GetstoreInEU: GetstoreInEU,
      SearchSO: SearchSO,
      GetstoreofCurrency: GetstoreofCurrency,
      getFormatedDate: getFormatedDate
    }
  })
