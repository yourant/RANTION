/**
 * @NApiVersion 2.x
 * @NScriptType MapReduceScript
 * @NModuleScope SameAccount
 */
define(['N/search', 'N/record',"N/log", "./Helper/Moment.min"],
/**
 * @param {search} search
 * @param {record} record
 */
function(search, record, log, moment) {
   
    /**
     * Marks the beginning of the Map/Reduce process and generates input data.
     *
     * @typedef {Object} ObjectRef
     * @property {number} id - Internal ID of the record instance
     * @property {string} type - Record type id
     *
     * @return {Array|Object|Search|RecordRef} inputSummary
     * @since 2015.1
     */
    function getInputData() {
        var orders = [], limit = 3000;
        log.debug("begin","begin");
        search.load({ type: 'customrecord_osp_son', id: 'customsearch_pending_shipment_receive' }).run().each(function(rec){
            log.debug("rec.id",rec.id);
            log.debug("rec.shipmentid",rec.getValue("custrecord_osp_s_shipment_id"));
            orders.push(
                {
                    id:rec.id,
                    shipmentid: rec.getValue("custrecord_osp_s_shipment_id"),
                    transfer_id: rec.getValue("custrecord_osp_s_tranid"),
                    item: rec.getValue("custrecord_osp_s_sku"),
                    itemfulfillment: rec.getValue("custrecord_osp_s_itemfulfillment"),
                    received_qty: rec.getValue("custrecord_osp_s_received_qty"),
                    fulfill_qty: rec.getValue("custrecord_osp_s_fhnumber"),//本次发货数量
                    acc_id: rec.getValue("custrecord_osp_s_store"),//店铺
                    acc_name: rec.getText("custrecord_osp_s_store")//店铺名称
                    
                }
            );
            return limit-- >0;
         });
         return orders;
    }

    /**
     * Executes when the map entry point is triggered and applies to each key/value pair.
     *
     * @param {MapSummary} context - Data collection containing the key/value pairs to process through the map stage
     * @since 2015.1
     */
    function map(context) {
        var obj = JSON.parse(context.value);
        var received_qty = obj.received_qty;//本物流运单行已收货数量
        if(!received_qty) received_qty = 0;
        var fulfill_qty = obj.fulfill_qty;//本物流运单行发货数量
        var pending_received_qty = fulfill_qty - received_qty;//本物流运单行待收货数量；
        var shipment_received_qty = 0;//shipment已接收数量
        var shipment_distribution = 0;//shipment已分配数量，相同shipment相同sku的物流运单行已收货数量的累计
        log.debug("obj",obj);
        
        try {
            //查询NSBS账号
            var nsbs_acc = obj.acc_id;
            var itemfulfillment_id = obj.itemfulfillment;
            var shipment_id,trandate;
            
        //     var received_num,received_status;
        //     var filters = [
        //         // [ "custrecord_aio_amazon_plan_shipmentid.custrecord_aio_amazon_shipment_account" ,  "is",nsbs_acc ],
        //         // 'and',
        //         [ "custrecord_aio_amazon_plan_shipmentid.name" ,  "is",obj.shipmentid ],
        //         'and',
        //         [ "custrecord_aio_amazon_plan_item.component" ,  "anyof",obj.item ],
        //         // 'and',
        //         // [ "custrecord_nsbs_amazon_plan_qty" ,  "equalto",obj.fulfill_qty ],
        //         // 'and',
        //         // [
        //         //     [ "custrecord_aio_amazon_plan_shipmentid.custrecord_aio_amazon_shipment_status", "is","RECEIVING"],//RECEIVING CLOSED
        //         //    'or',
        //         //     [ "custrecord_aio_amazon_plan_shipmentid.custrecord_aio_amazon_shipment_status", "is","CLOSED"]
        //         // ]
        //     ];
        //     search.create({
        //         type: 'customrecord_aio_amazon_plan_items',
        //         filters:filters,
        //         columns: [
        //             { name : "custrecord_aio_amazon_shipment_status",join:"custrecord_aio_amazon_plan_shipmentid"},
        //             { name : "custrecord_aio_amazon_plan_qty"},
        //             { name : "custrecord_aio_amazon_actual_shipped_qty"},
        //             { name : "custrecord_aio_amazon_plan_shipmentid"}
        //         ]	
        //     }).run().each(function(rec){
        //         log.debug('plan_items rec',rec);
        //         //该shipmentid实收数量减去对应的已生成货品收据的总数量才是本次收货可分配的数量
        //         received_status = rec.getValue(rec.columns[0]);
        //         shipment_id = rec.getValue(rec.columns[3]);
        //         shipment_received_qty = rec.getValue(rec.columns[2])
                
                
        //         return false;
        //     });
        //     if(received_status){
        //         record.submitFields({
        //             type: 'customrecord_osp_son',
        //             id: Number(obj.id),
        //             values: {
        //             'custrecord_osp_s_memo': received_status,
        //             'custrecord_osp_s_shipment_received_qty': shipment_received_qty
        //             }
        //         });
        //    }else{
        //         record.submitFields({
        //             type: 'customrecord_osp_son',
        //             id: Number(obj.id),
        //             values: {
        //             'custrecord_osp_s_memo': '未匹配到shipment明细行'
        //             }
        //         });
        //    }
        //     return;


            if(!itemfulfillment_id){
                //物流运单行上没有货品实施单，则搜索TO单履行单；
                var ids = [];
                search.create({
                    type:'itemfulfillment',
                    filters:[
                        {name:'createdfrom',operator:'is',values: obj.transfer_id},
                        {name:'mainline',operator:'is',values: false},
                        {name:'quantity',operator:'equalto',values: obj.fulfill_qty},
                        {name:'item',operator:'is',values: obj.item},
                    ],
                    columns:[
                        {name:"internalid",summary: "GROUP"}
                    ]
                }).run().each(function (rec) {
                    ids.push(rec.getValue(rec.columns[0]));
                return true;   
                });
                if(ids.length>1){
                    throw '物流运单行'+obj.id+'匹配到多行个货品实施单，请手动收货'
                }else if(ids.length == 0){
                    throw '物流运单行'+obj.id+'未匹配到TO单货品实施单，请手动收货'
                }else{
                    itemfulfillment_id = ids[0];
                }
            }
            var f = record.transform({
                fromType: record.Type.TRANSFER_ORDER,
                toType: record.Type.ITEM_RECEIPT,
                fromId: Number(obj.transfer_id)      
            });
           f.setValue({fieldId: 'itemfulfillment', value: itemfulfillment_id});
            if(itemfulfillment_id){
                f = record.transform({
                    fromType: record.Type.TRANSFER_ORDER,
                    toType: record.Type.ITEM_RECEIPT,
                    fromId: Number(obj.transfer_id),
                    defaultValues:{'itemfulfillment' : itemfulfillment_id}     
                }); 
            }
            var received = false;
            var received_num,received_status;
            var lc = f.getLineCount({ sublistId: 'item' });			        
            for (var ln = 0; ln < lc; ln++) {
                var item = f.getSublistValue({ sublistId: 'item', fieldId: 'item', line: ln });
                if(item == obj.item){
                    log.debug("item",item);
                    log.debug("obj.item",obj.item);
                	var available_received_qty = 0;//shipment已入库数量中的可用数量
                	var filters = [
                        // [ "custrecord_aio_amazon_plan_shipmentid.custrecord_aio_amazon_shipment_account" ,  "is",nsbs_acc ],
                        // 'and',
                		[ "custrecord_aio_amazon_plan_shipmentid.name" ,  "is",obj.shipmentid ],
                        'and',
                        [ "custrecord_aio_amazon_plan_item.component" ,  "anyof",item ],
                        // 'and',
                        // [ "custrecord_nsbs_amazon_plan_qty" ,  "equalto",obj.fulfill_qty ],
                        // 'and',
                        // [
	                    //     [ "custrecord_aio_amazon_plan_shipmentid.custrecord_aio_amazon_shipment_status", "is","RECEIVING"],//RECEIVING CLOSED
	                    //    'or',
	                    //     [ "custrecord_aio_amazon_plan_shipmentid.custrecord_aio_amazon_shipment_status", "is","CLOSED"]
                        // ]
                    ];
                    var match = false;
                    search.create({
                        type: 'customrecord_aio_amazon_plan_items',
                        filters:filters,
                        columns: [
                            { name : "custrecord_aio_amazon_shipment_status",join:"custrecord_aio_amazon_plan_shipmentid"},
                            { name : "custrecord_aio_amazon_plan_qty"},
                            { name : "custrecord_aio_amazon_actual_shipped_qty"},
                            { name : "custrecord_aio_amazon_plan_shipmentid"}
                        ]	
                    }).run().each(function(rec){
                        match = true;
                        log.debug('plan_items rec',rec);
                        //该shipmentid实收数量减去对应的已生成货品收据的总数量才是本次收货可分配的数量
                        received_status = rec.getValue(rec.columns[0]);
                        search.create({
                            type: 'customrecord_osp_son',
                            filters: [
                                { name: 'custrecord_osp_s_shipment_id', operator: search.Operator.IS, values: obj.shipmentid },
                                { name: 'custrecord_osp_s_sku', operator: search.Operator.IS, values:item },
                                { name: 'custrecord_osp_s_store',operator: search.Operator.IS, values: nsbs_acc},
                               // { name: 'id', operator: "notequalto", values:obj.id },
                            ],
                            columns: [
                                {name: 'custrecord_osp_s_received_qty',summary: "SUM"}
                            ]
                        }).run().each(function (rec1) {
                            log.debug('qty1',rec1.getValue(rec1.columns[0]))
                            log.debug('qty2',rec.getValue(rec.columns[2]))
                            shipment_distribution = rec1.getValue(rec1.columns[0]);
                            shipment_id = rec.getValue(rec.columns[3]);
                            shipment_received_qty = rec.getValue(rec.columns[2])
                            //可用已收货数量=shipment已收货数量减去所有物流运单行的收货数量
                            available_received_qty = rec.getValue(rec.columns[2]) - rec1.getValue(rec1.columns[0]);

                            if(available_received_qty > 0 ){
                                //如果可分配数量大于0，则开始接收本行货品
                                if(available_received_qty<pending_received_qty){
                                    //如果可分配数量小于本次待接收数量，则分配全部可分配数量到本单
                                    received_num = available_received_qty
                                }else{
                                    //如果可分配数量大于本次待接收数量，则分配本单只接收待接收的数量
                                    received_num = pending_received_qty
                                }
                            }
                            
                            return true;
                        });
                        
                        return false;
                    });
                    // var location = f.getSublistValue({sublistId: 'item', fieldId: 'location', line: ln});
                    // log.debug('location',location);
                    log.debug('received_num',received_num);
                    if (received_num && received_num >0) 
                    {
                        //搜索shipment更新为recieving的时间
                        //大量更新前面收货情况的时候才需要这个，正常情况下不需要查询时间，直接设置当前时间即可
                        if(shipment_id){
                            search.create({
                                type: search.Type.SYSTEM_NOTE,
                                columns: ['date', 'recordtype', 'record', 'field', 'oldvalue', 'newvalue'],
                                filters: [{
                                    name: 'recordtype',
                                    operator: search.Operator.IS,
                                    values: '93'//263
                                },
                                {
                                    name: 'recordid',
                                    operator: "equalto",
                                    values: shipment_id
                                },
                                {
                                    name: 'newvalue',
                                    operator: "startswith",
                                    values: "RECEIVING"
                                }]
                            }).run().each(function (rec) {
                                log.debug('trandate',rec.getValue('date'))
                                trandate = rec.getValue('date');
                              //  f.setText('trandate',trandate.split(' ')[0])
                                return false;
                            });
                        }
                        f.setSublistValue({ sublistId: 'item', fieldId: 'itemreceive', value: true, line: ln });
                        f.setSublistValue({ sublistId: 'item', fieldId: 'custcol_actual_received_quantity', value: received_qty, line: ln }); 
                        received = true;
                    } else {
                        f.setSublistValue({ sublistId: 'item', fieldId: 'itemreceive', value: false, line: ln });  
                    }
                }else{
                	log.debug("item 1",item);
                    log.debug("obj.item 1",obj.item);
                	f.setSublistValue({ sublistId: 'item', fieldId: 'itemreceive', value: false, line: ln });
                }  
            }
            // log.debug('itemfulfillment',f.getValue('itemfulfillment'));
            // log.debug('itemfulfillment',f);
            if(received){
            	f.save();
            //更新物流运单行收货数量、已收货
                var values = {
                    'custrecord_osp_s_received_qty': Number(received_num)+Number(received_qty),
                    'custrecord_osp_s_memo': received_status,
                    'custrecord_osp_s_shipment_distribution': shipment_distribution,
                    'custrecord_osp_s_shipment_received_qty': shipment_received_qty
                }
                if(received_status == 'CLOSED'||received_num == pending_received_qty){
                    values = {
                        'custrecord_osp_s_received': true,
                        'custrecord_osp_s_received_qty': Number(received_num)+Number(received_qty),
                        'custrecord_osp_s_shipment_distribution': shipment_distribution,
                        'custrecord_osp_s_memo': received_status,
                        'custrecord_osp_s_shipment_received_qty': shipment_received_qty
                    }
                }
            	record.submitFields({
            		 type: 'customrecord_osp_son',                                                                                                                                                                           
            		 id: Number(obj.id),
            		 values: values
            	});
            }else{
                
                log.debug('received_status',received_status)
               if(received_status){
                    record.submitFields({
                        type: 'customrecord_osp_son',
                        id: Number(obj.id),
                        values: {
                        'custrecord_osp_s_memo': received_status,
                        'custrecord_osp_s_shipment_distribution': shipment_distribution,
                        'custrecord_osp_s_shipment_received_qty': shipment_received_qty
                        }
                    });
               }else{
                    record.submitFields({
                        type: 'customrecord_osp_son',
                        id: Number(obj.id),
                        values: {
                        'custrecord_osp_s_memo': '未匹配到shipment明细行'
                        }
                    });
               }
            }
        } catch (error) {
            log.error('error',error);
        }
    }  

    /**
     * Executes when the reduce entry point is triggered and applies to each group.
     *
     * @param {ReduceSummary} context - Data collection containing the groups to process through the reduce stage
     * @since 2015.1
     */
    function reduce(context) {

    }


    /**
     * Executes when the summarize entry point is triggered and applies to the result set.
     *
     * @param {Summary} summary - Holds statistics regarding the execution of a map/reduce script
     * @since 2015.1
     */
    function summarize(summary) {

    }

    return {
        getInputData: getInputData,
        map: map,
        reduce: reduce,
        summarize: summarize
    };
    
});
