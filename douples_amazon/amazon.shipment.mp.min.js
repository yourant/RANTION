/*!
 * Douples NetSuite Bunlde
 * Copyright (C) 2019  Shenzhen Douples TechnoIogy Co.,Ltd.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/**
 * @NApiVersion 2.x
 * @NScriptType MapReduceScript
 * @NModuleScope SameAccount
 */
define(["require", "exports", "./Helper/core.min", "N/log", "N/search", "N/record"], function (require, exports, core, log, search, record) {
    Object.defineProperty(exports, "__esModule", { value: true });
    var t = core.ns.amazon_inbound_address;
    exports.getInputData = function () {
        var shipments = [];
        core.amazon.getAccountList().map(function (account) {
            core.amazon.listInboundShipments(account.auth_meta).map(function (shipment) {
                shipments.push({
                    aid: account.id,
                    auth: account.auth_meta,
                    info: account.info,
                    pref: account.preference,
                    extra: account.extra_info,
                    shipment: shipment
                });
            });
        });
        return shipments;
    };
    exports.map = function (ctx) {
        var obj = JSON.parse(ctx.value), account_id = obj.aid, auth = obj.auth, info = obj.info, extra = obj.extra, pref = obj.pref, 
        // account = record.load({ type: core.ns.account._name, id: account_id, isDynamic: true }),
        shipment = obj.shipment, externalid = "aio" + account_id + "." + shipment.shipment_id;
        var to;
        search.create({
            type: 'transferorder',
            filters: [
                { name: 'mainline', operator: 'is', values: true },
                { name: 'externalid', operator: 'is', values: externalid }
            ]
        }).run().each(function (rec) {
            to = record.load({ type: 'transferorder', id: rec.id, isDynamic: true });
            return false;
        });
        if (!to) {
            to = record.create({ type: 'transferorder', isDynamic: true });
            to.setValue({ fieldId: 'customform', value: extra.aio_to_default_form });
            to.setValue({ fieldId: 'externalid', value: externalid });
            to.setValue({ fieldId: 'memo', value: shipment.shipment_id });
        }
        if (core.utils.checkIfSubsidiaryEnabled())
            to.setValue({ fieldId: 'subsidiary', value: info.subsidiary });
        to.setValue({ fieldId: 'location', value: extra.to_default_from_location });
        to.setValue({ fieldId: 'transferlocation', value: extra.fbaorder_location });
        to.setValue({ fieldId: 'department', value: info.dept });
        to.setValue({ fieldId: 'firmed', value: true });
        to.setValue({ fieldId: 'incoterm', value: 1 });
        to.setValue({ fieldId: 'tranid', value: "AIO" + shipment.shipment_id });
        to.setValue({ fieldId: core.ns.bodies.account, value: account_id });
        to.setValue({ fieldId: core.ns.bodies.marketplaceid, value: 1 /* amazon */ });
        to.setValue({ fieldId: core.ns.bodies.inbound_shipment_id, value: shipment.shipment_id });
        to.setValue({ fieldId: core.ns.bodies.inbound_shipment_name, value: shipment.shipment_name });
        to.setValue({ fieldId: core.ns.bodies.inbound_dest_center_id, value: shipment.center_id });
        to.setValue({ fieldId: core.ns.bodies.inbound_label_prep_type, value: shipment.label_prep_type });
        to.setValue({ fieldId: core.ns.bodies.inbound_shipment_status, value: shipment.shipment_status });
        to.setValue({ fieldId: core.ns.bodies.inbound_case_required, value: shipment.are_cases_required });
        // 缁存姢涓�涓嬪彂璐у湴鍧�
        var to_addr_id;
        search.create({
            type: t._name,
            filters: [
                { name: t.custrecordwmaia_country_code, operator: search.Operator.IS, values: shipment.ship_from_address.CountryCode },
                { name: t.custrecordwmaia_city, operator: search.Operator.IS, values: shipment.ship_from_address.City },
                { name: t.custrecordwmaia_address_line1, operator: search.Operator.IS, values: shipment.ship_from_address.AddressLine1 },
                { name: t.custrecordwmaia_shipfrom_address, operator: search.Operator.IS, values: true },
            ]
        }).run().each(function (rec) {
            to_addr_id = record.load({ type: t._name, id: rec.id, isDynamic: true });
            return false;
        });
        if (!to_addr_id) {
            var to_addr = record.create({ type: t._name, isDynamic: true });
            to_addr.setValue({ fieldId: t.custrecordwmaia_shipfrom_address, value: false });
            to_addr.setValue({ fieldId: 'name', value: shipment.ship_from_address.Name + ", " + shipment.ship_from_address.AddressLine1 });
            to_addr.setValue({ fieldId: t.custrecordcenterid, value: shipment.center_id });
            to_addr.setValue({ fieldId: t.name, value: shipment.shipment_name });
            to_addr.setValue({ fieldId: t.custrecordwmaia_address_line1, value: shipment.ship_from_address.AddressLine1 });
            to_addr.setValue({ fieldId: t.custrecordwmaia_address_line2, value: shipment.ship_from_address.AddressLine2 });
            to_addr.setValue({ fieldId: t.custrecordwmaia_city, value: shipment.ship_from_address.City });
            to_addr.setValue({ fieldId: t.custrecordwmaia_district_or_country, value: shipment.ship_from_address.DistrictOrCounty });
            to_addr.setValue({ fieldId: t.custrecordwmaia_state_or_province_code, value: shipment.ship_from_address.StateOrProvinceCode });
            to_addr.setValue({ fieldId: t.custrecordwmaia_country_code, value: shipment.ship_from_address.CountryCode });
            to_addr.setValue({ fieldId: t.custrecordwmaia_postal_code, value: shipment.ship_from_address.PostalCode });
            to_addr_id = to_addr.save();
            to.setValue({ fieldId: core.ns.bodies.inbound_ship_from_addr, value: to_addr_id });
        }
        // 璇︽儏鏁版嵁鍒嗘暎鍒癕AP閲岄潰鏉ヨ幏鍙�
        core.amazon.listInboundShipmentsItems(auth, shipment.shipment_id).map(function (item) {
            search.create({ type: 'item', filters: [{ name: 'itemid', operator: 'is', values: item.seller_sku }], columns: [{ name: 'type' }, { name: 'itemid' }] }).run().each(function (rec) {
                var type = rec.getValue(rec.columns[0]);
                var item_name = rec.getValue(rec.columns[1]);
                var ln = to.findSublistLineWithValue({ sublistId: 'item', fieldId: 'item', value: rec.id });
                if (type == 'Kit') {
                    var i = record.load({ type: 'kititem', id: item.seller_sku });
                    for (var index = 0; index < i.getLineCount({ sublistId: 'member' }); index++) {
                        var item_id = i.getSublistValue({ sublistId: 'member', fieldId: 'item', line: index });
                        var item_qty = Number(i.getSublistValue({ sublistId: 'member', fieldId: 'quantity', line: index }));
                        ln ? to.selectLine({ sublistId: 'item', line: ln }) : to.selectNewLine({ sublistId: 'item' });
                        to.setCurrentSublistValue({ sublistId: 'item', fieldId: 'item', value: item_id });
                        to.setCurrentSublistValue({ sublistId: 'item', fieldId: 'quantity', value: "" + Number(item.quantity_shipped) * item_qty });
                        to.setCurrentSublistValue({ sublistId: 'item', fieldId: 'quantityreceived', value: "" + Number(item.quantity_received) * item_qty });
                        // 鑷畾涔夐儴鍒�
                        to.setCurrentSublistValue({ sublistId: 'item', fieldId: 'custcol_aio_shipment_id', value: shipment.shipment_id });
                        to.setCurrentSublistValue({ sublistId: 'item', fieldId: 'custcol_aio_amazon_msku', value: item.seller_sku });
                        to.setCurrentSublistValue({ sublistId: 'item', fieldId: 'custcol_aio_fnsku', value: item.fulfillment_network_sku });
                        to.setCurrentSublistValue({ sublistId: 'item', fieldId: 'custcol_aio_qty_shipped', value: "" + Number(item.quantity_shipped) * item_qty });
                        to.setCurrentSublistValue({ sublistId: 'item', fieldId: 'custcol_aio_qty_received', value: "" + Number(item.quantity_received) * item_qty });
                        to.setCurrentSublistValue({ sublistId: 'item', fieldId: 'custcol_aio_qty_in_case', value: "" + (item.quantity_in_case || 1) });
                        to.commitLine({ sublistId: 'item' });
                    }
                }
                else {
                    to.selectNewLine({ sublistId: 'item' });
                    to.setCurrentSublistValue({ sublistId: 'item', fieldId: 'item', value: "" + item.seller_sku });
                    to.setCurrentSublistValue({ sublistId: 'item', fieldId: 'quantity', value: "" + item.quantity_shipped });
                    to.setCurrentSublistValue({ sublistId: 'item', fieldId: 'quantityreceived', value: item.quantity_received });
                    // 鑷畾涔夐儴鍒�
                    to.setCurrentSublistValue({ sublistId: 'item', fieldId: 'custcol_aio_shipment_id', value: shipment.shipment_id });
                    to.setCurrentSublistValue({ sublistId: 'item', fieldId: 'custcol_aio_amazon_msku', value: "" + item.seller_sku });
                    to.setCurrentSublistValue({ sublistId: 'item', fieldId: 'custcol_aio_fnsku', value: "" + item.fulfillment_network_sku });
                    to.setCurrentSublistValue({ sublistId: 'item', fieldId: 'custcol_aio_qty_shipped', value: "" + item.quantity_shipped });
                    to.setCurrentSublistValue({ sublistId: 'item', fieldId: 'custcol_aio_qty_received', value: item.quantity_received });
                    to.setCurrentSublistValue({ sublistId: 'item', fieldId: 'custcol_aio_qty_in_case', value: "" + (item.quantity_in_case || 1) });
                    to.commitLine({ sublistId: 'item' });
                }
                return false;
            });
        });
        try {
            to.save();
        }
        catch (err) {
            log.error("Sync Shipment Error: " + shipment.shipment_id, err.message);
            throw "Sync Shipment[" + shipment.shipment_id + "] Error: " + err.message + " abort operation!";
        }
    };
    exports.reduce = function (ctx) { };
    exports.summarize = core.utils.summarize;
});
